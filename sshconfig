#!/bin/bash

# 2015 Jon Suderman
# https://github.com/suderman/sshconfig

# Helper methods for prettier shell scripting - http://suderman.github.io/shelper
eval "$(cat ~/.local/share/shelper.sh || curl suderman.github.io/shelper/shelper.sh)"
item() { printf "$_yellow_$1$MSG_COLOR\n"; }

# Expand tilde just in case
SSH_HOME="~/.ssh"
eval SSH_HOME=$SSH_HOME

# Expand tilde just in case
defined "$SSH_CONFIGS" || SSH_CONFIGS="$SSH_HOME"
eval SSH_CONFIGS=$SSH_CONFIGS

# Where the .ssh/config is saved
output="$HOME/.ssh/config"

# Main
__sshconfig() {
  msg "$SSH_HOME/config"

  # Clear out ssh/config
  mv -f "$output" "$output.backup" 
  echo "# Generated by sshconfig" >> $output
  echo "# https://github.com/suderman/sshconfig" >> $output
  echo "#" >> $output
  echo "# Do not edit this file!" >> $output
  echo "# Run \`sshconfig\` to generate this file from $SSH_CONFIGS/config.*" >> $output
  echo "" >> $output

  # Look for all ssh configs 
  for path in $SSH_CONFIGS/config.*; do
    if has $path; then
      config=$(basename "$path")

      # Skip over default and backup
      case "$config" in
        config.default) ;;
        config.backup) ;;

        # Copy config & actually use environment variables
        *) __cp $SSH_CONFIGS/$config ;;
      esac
    fi
  done

  # Concate default at the bottom
  if has $SSH_CONFIGS/config.default; then
    __cp $SSH_CONFIGS/config.default
  fi

  # Set generated config to read-only
  chmod 400 "$output"
}


# Concat config.* to config, expanding environment variables long the way
__cp() {
  input=$1
  item "ssh/config includes $(basename "$input")"

  # Header for each config file
  div="#-----------------------------------------------------------------------------#"
  echo $div >> $output
  echo "# $input" >> $output
  echo $div >> $output

  # Search and replace
  # http://stackoverflow.com/questions/2914220/
  cat $input | \
  while read line ; do

    # Replace environment variables with values
    while [[ "$line" =~ (\$[a-zA-Z_][a-zA-Z_0-9]*) ]] ; do
      LHS=${BASH_REMATCH[1]}
      RHS="$(eval echo "\"$LHS\"")"
      line=${line//$LHS/$RHS}
    done

    # Echo to output without expanding wildcards
    set -f && echo $line >> $output
  done
}

# Copy any ~/.ssh/*.pub files to ~/.ssh/authorized_keys 
__authorizedkeys() {
  msg "$SSH_HOME/authorized_keys"

  # Ensure authorized_keys exists
  touch "$SSH_HOME/authorized_keys"

  # Append all public keys to it 
  for path in $SSH_CONFIGS/*.pub; do
    if has $path; then
      pubkey=$(cat $path)
      if defined "$pubkey"; then
        append "$pubkey" "$SSH_HOME/authorized_keys"
        item "authorized_keys includes $(basename "$path")"
      fi
    fi
  done
}

# May as well fix permissions while we're at it
__sshpermissions() {
  chmod 700 $SSH_HOME

  # Set known_hosts to write by owner, read-only by all
  f="$SSH_HOME/known_hosts"
  has "$f" && chmod 644 $f

  # Set authorized_keys to read-write by owner
  f="$SSH_HOME/authorized_keys"
  has "$f" && chmod 600 $f

  # Set all private keys to read-only by owner
  for f in $SSH_HOME/id_*; do
    has "$f" && chmod 400 $f
  done
  for f in $SSH_HOME/*_rsa; do
    has "$f" && chmod 400 $f
  done
  for f in $SSH_HOME/*_dsa; do
    has "$f" && chmod 400 $f
  done
  for f in $SSH_HOME/*.key; do
    has "$f" && chmod 400 $f
  done  
  for f in $SSH_HOME/*.pem; do
    has "$f" && chmod 400 $f
  done

  # Set all public keys to read-only by all
  for f in $SSH_HOME/*.pub; do
    has "$f" && chmod 444 $f
  done

  # Done!
  msg "$SSH_HOME/* permissions OK"
}

# Run the config
__sshconfig

# Update authorized keys
__authorizedkeys

# Verify permissions
__sshpermissions

